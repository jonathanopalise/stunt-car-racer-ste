513e8: this belongs to the rendering of the top half of the engine
513e0: this appears to be the start of a span that draws a line of the engine top half
    - a1 contains mask data, 1 word at a time
        - i'll need to apply the mask data across all 4 bitplanes
    - a0 contains graphics data
    - d3 is the iteration count, each iteration is 16 pixels (8 bytes)


move.l (a0),d0    ; get longword from screen buffer
move.w (a1),d5    ; get word of mask data into half of d5
swap d5
move.w (a1)+,d5   ; get word of mask data into other half of d5
and.l d5,d0       ; apply mask data to screen data
or.l (a1)+,d0     ; apply bitmap data to screen data
move.l d0,(a0)+   ; write processed longword back to screen buffer

move.l a0,(d0)    ; get longword from screen buffer
and.l d5,d0       ; apply mask data
or.l (a1)+,d0     ; apply bitmap data
move.l d0,(a0)+   ; move onto next

so structure of data is:
- 1 word of mask data
- 4 words of bitmap data

          FF 8A00   |oooooooo||oooooooo|     HALFTONE RAM
          FF 8A02   |oooooooo||oooooooo|
          FF 8A04   |oooooooo||oooooooo|
                    :        ::        :
          FF 8A1E   |oooooooo||oooooooo|
          FF 8A20   |oooooooo||ooooooo-|     SOURCE X INCREMENT
          FF 8A22   |oooooooo||ooooooo-|     SOURCE Y INCREMENT
          FF 8A24   |--------||oooooooo|     SOURCE ADDRESS
          FF 8A26   |oooooooo||ooooooo-|
          FF 8A28   |oooooooo||oooooooo|     ENDMASK 1
          FF 8A2A   |oooooooo||oooooooo|     ENDMASK 2
          FF 8A2C   |oooooooo||oooooooo|     ENDMASK 3
          FF 8A2E   |oooooooo||ooooooo-|     DESTINATION X INCREMENT
          FF 8A30   |oooooooo||ooooooo-|     DESTINATION Y INCREMENT
          FF 8A32   |--------||oooooooo|     DESTINATION ADDRESS
          FF 8A34   |oooooooo||ooooooo-|
          FF 8A36   |oooooooo||oooooooo|     X COUNT
          FF 8A38   |oooooooo||oooooooo|     Y COUNT

          FF 8A3A   |------oo|               HOP
          FF 8A3B   |----oooo|               OP

          FF 8A3C   |ooo-oooo|
                    ||| |__|_____________ LINE NUMBER
                    |||__________________ SMUDGE
                     ||__________________ HOG
                     |___________________ BUSY

          FF 8A3D   |oo--oooo|
                    ||  |__|_____________ SKEW
                    ||___________________ NFSR
                     |____________________ FXSR


                _________  _____________           ________________
               |         ||             |         |                |
               |  SOURCE ||  SOURCE     |         |  DESTINATION   |
               |_________||_____________|         |________________|
                    |________________|<< SKEW |                  |
                                  |                              |
           ______________      ___|____       ________________   |
          |              |    |        |     |                |  |
          |   HALFTONE   |----|  HOP   |-----|    LOGIC OP    |--|
          |______________|    |________|     |________________|  |
                                                       |         |
                                                   ____|____     |
                                                  |         |    |
                                                  | ENDMASK |____|
                                                  |_________|
                                                       |
                                              _________|_________
                                             |                   |
                                             |  NEW DESTINATION  |
                                             |___________________|
           _____________________________
          |    |                        |
          | HOP| COMBINATION RULE       |
          |    |                        |
          | 0  | all ones               |
          | 1  | halftone               |
          | 2  | source                 |
          | 3  | source AND halftone    |
          |____|________________________|

           _______________________________________
          |    |                                  |
          | OP | COMBINATION RULE                 |
          |    |                                  |
          | 0  | all zeros                        |
          | 1  | source AND destination           |
          | 2  | source AND NOT destination       |
          | 3  | source                           |
          | 4  | NOT source AND destination       |
          | 5  | destination                      |
          | 6  | source XOR destination           |
          | 7  | source OR destination            |
          | 8  | NOT source AND NOT destination   |
          | 9  | NOT source XOR destination       |
          | A  | NOT destination                  |
          | B  | source OR NOT destination        |
          | C  | NOT source                       |
          | D  | NOT source OR destination        |
          | E  | NOT source OR NOT destination    |
          | F  | all ones                         |
          |____|__________________________________|

   | HOP
LOP| 0  1  2  3    HOP = Halftone Operation
---+-----------    LOP = Logical Operation
0  | 1  1  1  1
1  | 2  2  3  3    All timings are assuming the BLITTER is
2  | 2  2  3  3    the only DMA device using the BUS. If other
3  | 1  1  2  2    devices are using the BUS the figures may
4  | 2  2  3  3    increase.
5  | 2  2  2  2
6  | 2  2  3  3    All timing figures are given in nops per word
7  | 2  2  3  3    of transfer. Ie. a value of 2 would take the
8  | 2  2  3  3    equivilent time of 2 nops to transfer 1 word
9  | 2  2  3  3    of data.
10 | 2  2  2  2
11 | 2  2  3  3
12 | 1  1  2  2
13 | 2  2  3  3
14 | 2  2  3  3
15 | 1  1  1  1

- 256 pixels
    - 128 bytes
    - 64 words of image data
    - 16 words of mask data

- i think we'll need 4 and passes!
    - We'll first need to do a direct copy of the mask into halftone ram ($ffff8a00)
        - srcxinc = 10
        - srcyinc = (not required)
        - sourceaddress = a1
        - endmask1 = $ffff
        - endmask2 = $ffff
        - endmask3 = $ffff
        - destxinc = 2
        - destyinc = (not required)
        - destinationaddress = 0xffff8a00
        - xcount = 16 (need to check this value against 68k code)
        - ycount = 1
        - hop/op = $0203 (hop = source, op = source, 2 nops)
        - single pass #$c0 to control
    - then we'll need to AND that mask data across all 4 bitplanes
        - srcxinc = (not required)
        - srcyinc = (not required)
        - sourceaddress = (not required)
        - endmask1 = $ffff
        - endmask2 = $ffff
        - endmask3 = $ffff
        - destxinc = 0
        - destyinc = 2
        - destinationaddress = a0 (add 2 on each pass)
        - xcount = 1
        - ycount = 16 (need to check this value against 68k code)
        - hop/op = #$0101 (hop = halftone, op = source AND destination, 2 nops)
        - four passes:
            - ycount = 16
            - #$c0 to control
            - add 2 to destinationaddress after each pass
    - finally we'll need to fill in the colours
        - srcxinc = 2
        - srcyinc = 2? (need to skip the mask word after each 4 words written)
        - sourceaddress = a1 + 2 (to skip initial mask word) 
        - endmask1 = $ffff
        - endmask2 = $ffff
        - endmask3 = $ffff
        - destxinc = 2
        - destyinc = (not required)
        - destinationaddress = a0
        - xcount = 4
        - ycount = 16
        - hop/op = #$0207 (hop = halftone, op = source AND destination, 3 nops)
        - single pass #$c0 to control

span line renderer:
        - srcxinc = (not required)
        - srcyinc = (not required)
        - sourceaddress = (not required)
        - endmask1 = $ffff
        - endmask2 = $ffff
        - endmask3 = $ffff
        - destxinc = 0
        - destyinc = 2
        - destinationaddress = a4
        - xcount = 1
        - ycount = d1*4
        - hop/op = $0103 (hop = source, op = source, 2 nops)
        - single pass #$c0 to control

---------------


    - ycount would need to be 1 (we need to stay on linenum = 0)
    - xcount would need to be d3*4 (number of 16 pixel blocks * 4)
    - hop/op: #$0101?
    - don't forget to set first word of halftone memory to mask word
    - don't forget to set start destination (a0)
    - srcxincfor each word, increment source by 5 words



- we should be able to get away with a single or pass because we're not skewing
    - hop/op: #$0207
    - number of words would need to be d3 * 4
    - don't forget to set source address
    - xcount would need to be 4, ycount would need to be d3 (total = d3*4)
    - we need to draw 4 words, then skip a source word, so:
        - srcxinc = 2, srcyinc = 2(?) (this is because we need 
        - dstxinc = 2, dstyinc = 0
    - don't forget to set start source = 2+a1
    - don't forget to set start destination = a0

at the end of each line, will we need to manually increment the source according

365312 + (160*100) + 80

b ($5d1d0).w ! ($5d1d0).w 

$50042
$800a6
$49850

this appears to be a main loop
w 0x50040 0x28 0xc7

- i want to extract the area from 50018 to 50048
- so 5003c needs to be patched with a long jump to the end of the loop in the 0x80000 range
- the instruction following 5003c needs to be a long jump to the start of the loop in the 0x80000 range
- 50018 needs to be patched to jump to the instruction immediately following the one at 5003c
- need to think about where the loop in the 0x80000 range goes to once done.

things that change d6:
    - 4e1c8: geometry goes mental if this is nopped
    - 4e1dc: geometry goes mental if this is nopped
    - 4efca: game crashes if this is nopped
    - 4efd4: appears to set d6 for ground colour
    - 50edc: this is a movem, leave until later
    - 50d9e: game crashes if replaced with "addq.l #2,a6", maybe related to tyre drawing?
    - 50da0: game crashes if nopped
    - 50dd8: this is a loop

things that change d7:
    - 4a42a
    - 4a4b0
    - 4b910
    - 4b968
    - 4ba38 
    - 4ba6a
    - 4ba70
    - 4ba84
    - 4ba8a
    - 4c6f8
    - 4c6fc
    - 4c6fe

instructions that determine the colour of polygons:
    - 4fe8e: (d6) influences a number of things, looks to be initialisation based
    - 4fe90: influences a number of things, looks to be initialisation based
    - 4feaa: appears to relate to the side panels
    - 4feac: appears to relate to the side panels
    - 4feb4: appears to relate to the side panels
    - 4feb6: this looks to be where the d6/d7 values are finalised
        - we typically have several breaks on 5003c for each break on 4feb6
    - so let's try intercepting 4feb6 to do some blitter magic


- (dbra) This instruction decrements Di.w and branches to Addr if the result is not -1.
- a jump from 50018 will draw at least 16 pixels, then decrement (d1=1 = 32 pixels)
    d1=0, 16 pixels
    d1=1, 32 pixels
    d1=2, 48 pixels

- from 5003c may be zero pixels (decrement and branch, so d1=1 is 0 pixels)
    d1=0, 0 pixels
    d1=1, 16 pixels
    d1=2, 32 pixels


- who is calling 513e8? Are all these occurences in the vbl?
    - 4cb3e: disabling this stops engine flames from appearing and adds flicker to race end light
    - 462f2: causes timer light to flash?
    - 4630c: not sure - seems to get called about every half second
    - 47c90: no idea
    - 47c94: no idea
    - 48b0c: no idea
    - 48b20: no idea
    - 4cab8: no idea, does get called regularly:
    - 4cac2: no idea
    - 4cad4: bottom half of right wheel disappears
    - 4cae4: bottom half or left wheel disappears
    - 4caee: draws main engine!
    - 4caf8:
    - 4cb02:
    - 4cb56:
    - 4cba4:
    - 4cbc8
    - 4dca8
    - 4dc94
    - 4dca6
    - 4dcb0
